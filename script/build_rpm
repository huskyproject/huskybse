#!/bin/bash
#
# build_rpm
#

VERSION="1.0"
top_directory=~/husky_build

die()
{
    printf '%s\n' "$1" >&2
    exit 1
}

show_help()
{
    cat <<EOF

Download the necessary sources and build RPMs for the programs specified
in PROGRAMS setting in huskymak.rpm.cfg and for the libraries they depend on.
Usage:.
    build_rpm [-r|--chroot CONFIG] [-v|--version] [-h|-\?|--help]
Options:
    -r CONFIG
    --chroot CONFIG
    --chroot=CONFIG
        Use specified chroot configuration as defined in
        ~/.config/mock/<CONFIG>.cfg or /etc/mock/<CONFIG>.cfg. This option may
        be used for cross-build. Optionally if CONFIG ends in '.cfg', it is
        interpreted as full path to config file. If the option is not specified,
        uses the chroot config linked to by /etc/mock/default.cfg.

    -v
    --version
        Print the script version and exit.

    -h
    -?
    --help
        Print this help and exit.
EOF
}

help=0
config=

case $1 in
    -h|-\?|--help)
        help=1
        ;;
    -v|--version)
        echo "version = $VERSION"
        exit
        ;;
    -r|--chroot)
        if [ -z `which --skip-alias mock` ]
        then
            die 'ERROR: to use "--chroot" (or "-r") you have to install mock'
        fi
        if [ "$2" ]
        then
            config="-r $2"
            help=0
            shift
        else
            die 'ERROR: "--chroot" requires a non-empty option argument'
        fi
        ;;
    --chroot=?*)
        if [ -z `which --skip-alias mock` ]
        then
            die 'ERROR: to use "--chroot" (or "-r") you have to install mock'
        fi
        config="-r ${1#*=}"
        help=0
        ;;
    --chroot=)
        die 'ERROR: "--chroot" requires a non-empty option argument'
        ;;
    -*)
        printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
        ;;
    *)
        ;;
esac

if [ $help -eq 1 ]
then
    show_help
    exit
fi


# Check that the script is not run by root
[ "$(id -u)" -eq 0 ] && die "DO NOT run this as root"

cd $top_directory
pushd husky >& /dev/null

make -j update

restart=0

if [ -n "$(diff $top_directory/husky/Makefile huskybse/Makefile)" ]
then
    cp -a -f huskybse/Makefile ./
fi

if [ -n "$(diff $top_directory/husky/husky.spec.in huskybse/husky.spec.in)" ]
then
    cp -a -f huskybse/husky.spec.in ./
fi

if [ -n "$(diff $top_directory/spec_configure huskybse/script/spec_configure)" ]
then
    cp -a -f huskybse/script/spec_configure $top_directory/
fi

if [ -n "$(diff $top_directory/huskymak.rpm.cfg.new huskybse/huskymak.rpm.cfg)" ]
then
    mv $top_directory/huskymak.rpm.cfg.new $top_directory/huskymak.rpm.cfg.old
    cp -a huskybse/huskymak.rpm.cfg $top_directory/huskymak.rpm.cfg.new
    if [ ! -e ./huskymak.rpm.cfg ]
    then
        cp -a $top_directory/huskymak.rpm.cfg.new huskymak.rpm.cfg
    fi
    echo
    echo "\"huskybse/huskymak.rpm.cfg\" has changed"
    echo
    echo "A new version of \"huskybse/huskymak.rpm.cfg\" is now"
    echo "in \"$top_directory/huskymak.rpm.cfg.new\" and its old version"
    echo "is now in \"$top_directory/huskymak.rpm.cfg.old\"."
    echo "Please adjust your \"$top_directory/husky/huskymak.rpm.cfg\" to the changes"
    echo "in \"$top_directory/huskymak.rpm.cfg.new\" and run \"build_rpm\" once more."
    echo
    restart=1
fi

if [ -n "$(diff $top_directory/build_rpm huskybse/script/build_rpm)" ]
then
    cp -a -f huskybse/script/build_rpm $top_directory/
    if [ "$restart" -ne 1 ]
    then
    echo
    echo 'The script "build_rpm" has changed. Please restart it.'
    echo
    restart=1
    fi
fi

[ "$restart" -eq 1 ] && exit

../spec_configure
popd

tar --exclude=.git -czf husky.tar.gz husky
if [ -n "$(which --skip-alias mock)" ]
then
    mock $config --buildsrpm --spec husky/husky.spec --sources husky.tar.gz --resultdir=./result
    SRCRPM=$(echo result/*.src.rpm)
    mock $config --no-clean --resultdir=./result --rebuild $SRCRPM
elif [ -n "$(which --skip-alias rpmbuild)" ]
then
    rpmbuild -ta husky.tar.gz
else
    echo "You have not installed both \"rpmbuild\" and \"mock\"; please, install them."
fi
